{"mappings":"ACAA,OAAO,cAAc,CAAG,CACtB,mBAAoB,MAAO,EAAiB,EAAU,KACpD,GAAI,CAAC,EAAiB,YACpB,QAAQ,KAAK,CAAC,yCAKhB,IAAM,EAAO,IAAI,KAAK,CADF,MAAM,EAAgB,WAAW,GAClB,CAAE,CAAE,KAAM,GAAY,EAAG,GACtD,EAAM,IAAI,eAAe,CAAC,GAEhC,GAAI,CACF,IAAM,EAAgB,SAAS,aAAa,CAAC,IAC7C,CAAA,EAAc,KAAK,CAAC,OAAO,CAAG,OAC9B,EAAc,IAAI,CAAG,EACrB,EAAc,QAAQ,CAAG,GAAY,GAErC,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,EAAc,KAAK,GAEnB,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,QAAU,CACR,IAAI,eAAe,CAAC,EACtB,CACF,EAEA,oBAAqB,CAAC,EAAK,KACzB,GAAI,CAAC,EAAK,YACR,QAAQ,KAAK,CAAC,qCAIhB,IAAM,EAAgB,SAAS,aAAa,CAAC,IAC7C,CAAA,EAAc,KAAK,CAAC,OAAO,CAAG,OAC9B,EAAc,IAAI,CAAG,EACrB,EAAc,QAAQ,CAAG,GAAY,GAErC,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,EAAc,KAAK,GAEnB,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,CACF","sources":["<anon>","Scripts/main.js"],"sourcesContent":["window.BlazorControls = {\n    downloadFileStream: async (streamReference, fileName, mimeType)=>{\n        if (!streamReference) {\n            console.error('streamReference is null or undefined.');\n            return;\n        }\n        const arrayBuffer = await streamReference.arrayBuffer();\n        const blob = new Blob([\n            arrayBuffer\n        ], {\n            type: mimeType || ''\n        });\n        const url = URL.createObjectURL(blob);\n        try {\n            const anchorElement = document.createElement('a');\n            anchorElement.style.display = 'none';\n            anchorElement.href = url;\n            anchorElement.download = fileName || '';\n            document.body.appendChild(anchorElement);\n            anchorElement.click();\n            document.body.removeChild(anchorElement);\n        } finally{\n            URL.revokeObjectURL(url);\n        }\n    },\n    triggerFileDownload: (url, fileName)=>{\n        if (!url) {\n            console.error('url is null, undefined, or empty.');\n            return;\n        }\n        const anchorElement = document.createElement('a');\n        anchorElement.style.display = 'none';\n        anchorElement.href = url;\n        anchorElement.download = fileName || '';\n        document.body.appendChild(anchorElement);\n        anchorElement.click();\n        document.body.removeChild(anchorElement);\n    }\n};\n\n\n//# sourceMappingURL=BlazorControls.js.map\n","window.BlazorControls = {\r\n  downloadFileStream: async (streamReference, fileName, mimeType) => {\r\n    if (!streamReference) {\r\n      console.error('streamReference is null or undefined.');\r\n      return;\r\n    }\r\n\r\n    const arrayBuffer = await streamReference.arrayBuffer();\r\n    const blob = new Blob([arrayBuffer], { type: mimeType || '' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    try {\r\n      const anchorElement = document.createElement('a');\r\n      anchorElement.style.display = 'none';\r\n      anchorElement.href = url;\r\n      anchorElement.download = fileName || '';\r\n\r\n      document.body.appendChild(anchorElement);\r\n\r\n      anchorElement.click();\r\n\r\n      document.body.removeChild(anchorElement);\r\n    } finally {\r\n      URL.revokeObjectURL(url);\r\n    }\r\n  },\r\n\r\n  triggerFileDownload: (url, fileName) => {\r\n    if (!url) {\r\n      console.error('url is null, undefined, or empty.');\r\n      return;\r\n    }\r\n\r\n    const anchorElement = document.createElement('a');\r\n    anchorElement.style.display = 'none';\r\n    anchorElement.href = url;\r\n    anchorElement.download = fileName || '';\r\n\r\n    document.body.appendChild(anchorElement);\r\n\r\n    anchorElement.click();\r\n\r\n    document.body.removeChild(anchorElement);\r\n  }\r\n}\r\n"],"names":["window","BlazorControls","downloadFileStream","streamReference","fileName","mimeType","console","error","blob","Blob","arrayBuffer","type","url","URL","createObjectURL","anchorElement","document","createElement","style","display","href","download","body","appendChild","click","removeChild","revokeObjectURL","triggerFileDownload"],"version":3,"file":"BlazorControls.js.map"}